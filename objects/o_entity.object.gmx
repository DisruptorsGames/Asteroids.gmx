<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

// remove from ship catalog
if (instance_exists(o_ship))
{
    var i = ds_list_find_index(o_ship.catalog, id);
    if (i &gt; -1)
        ds_list_delete(o_ship.catalog, i);
}

// cleanup lists
switch (object_index)
{
    case o_space_station:
        ds_list_destroy(docks);
        ds_list_destroy(sales);
    case o_marker:
        ds_list_destroy(catalog);
        ds_list_destroy(inventory);
        ds_map_destroy(parts);
        break;
}
ds_list_destroy(in_words);
ds_list_destroy(out_words);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear Output
if (instance_exists(o_ship))
    o_ship.out = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interactions
if (on_screen(x, y) &amp;&amp; is_type(o_blackhole))
    phy_rotation -= 4;
    
if (on_screen(x, y) &amp;&amp; in_range(o_ship, range))
{
    // docked
    if (o_ship.target == id)
    {
        // handle input and output
        o_ship.in = keyboard_string;
    
        // typing
        if (global.typing)
        {
            // type
            if (keyboard_check_pressed(o_ship.type))
            {
                if (string_length(o_ship.in) &gt; 0)
                {
                    // cracked!
                    if (o_ship.in == key)
                    {
                        // decode
                        if (name == base64_encode(string(id)))
                        {
                            name = base64_decode(name);
                            color = merge_colour(image_blend, o_ship.image_blend, 0.75);
                            icon = s_decoded;
                        }
                        else if (name == string(id))
                        {
                            name = base64_encode(name);
                            color = image_blend;
                            // ToDo: work with other entities than just Space Station
                            icon = entity_get_sprite(object_index);
                        }

                        encoded = !encoded;
                        o_ship.out = generate_key(24);
                    }
                    else
                        o_ship.out = string_interpret(o_ship.in);
                        
                    alarm[0] = seconds(3);
                }
                global.typing = false;
            }
        }
        // not typing
        else
        {
            // type
            if (keyboard_check_pressed(o_ship.type))
                global.typing = true;
        
            // use
            if (keyboard_check_pressed(o_ship.use))
            {
                // take item
                if (!encoded &amp;&amp; !is_undefined(o_ship.selected)
                    &amp;&amp; !is_undefined(inventory) &amp;&amp; ds_list_size(inventory) &gt; 0)
                {
                    // copy over catalog
                    for (var i = 0; i &lt; ds_list_size(catalog); i++)
                    {
                        // only add new items
                        var inst = catalog[| i];
                        var index = ds_list_find_index(o_ship.catalog, inst);
                        if (index == -1 &amp;&amp; instance_exists(inst))
                            ds_list_add(o_ship.catalog, inst);
                        ds_list_delete(catalog, i);
                    }
                    
                    // take inventory item that is selected
                    var color = o_ship.selected[element.color], 
                        amount = o_ship.selected[element.amount]
                        size = ds_list_size(inventory);
                    ds_list_add(o_ship.inventory, element_create(color, amount, true));
                    o_ship.selected = element_dec(inventory, color, amount);
                }
                else
                {
                    // disengage docking
                    dock(noone, false);
                    // remove the ship from dock
                    if (is_type(o_space_station))
                    {
                        var index = ds_list_find_index(docks, o_ship.id);
                        if (index &gt; -1)
                            ds_list_delete(docks, index);
                    }
                    // remove marker
                    if (is_type(o_marker) &amp;&amp; ds_map_size(inventory) == 0)
                        instance_destroy();
                }
            }
            
            keyboard_string = "";
        }
    }
    // use
    else if (keyboard_check_pressed(o_ship.use) &amp;&amp; !banned)
    {
        // engage docking
        dock(id, true);
        if (is_type(o_space_station))
        {
            if(ds_list_find_index(docks, o_ship.id) == -1)
                ds_list_add(docks, o_ship.id);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Self
image_blend = ternary(is_arcade(), c_white, image_blend);
draw_self();

// dont do fancy stuff if arcade mode
if (is_arcade())
    return 0;
    
// orbit around planet
if (target == o_planet)
{
    var dir = point_direction(target.x, target.y, x, y),
        rng = point_distance(target.x, target.y, x, y),
        len = rng * pi * 2,
        ang = dir + 3 * 360 / len,
        xx = target.x + lengthdir_x(orbit, ang),
        yy = target.y + lengthdir_y(orbit, ang);
    
    phy_position_x = xx;
    phy_position_y = yy;
}

if (on_screen(x, y))
{    
    // draw spawn box
    if (global.debug)
    {
        draw_rectangle_colour(x - sprite_width * 2, y - sprite_height * 2, x + sprite_width * 2, y + sprite_height * 2, c_blue, c_blue, c_blue, c_blue, true);
        draw_circle_colour(x, y, range, c_blue, c_blue, true);
    }
    
    // calculations
    var hw = sprite_width / 2, hh = sprite_height / 2;
    
    // name
    draw_textbox(x - string_width(name) / 2, y + hh + 4, name, image_blend, c_black, f_default, true, false);
    
    //draw_circle_colour(x, y, 4, c_red, c_red, false);
    
    // docked ship count
    if (is_type(o_space_station))
    {
        var text = string(color_get_value(image_blend));
        draw_text_colour(x - string_width(text) / 2, y - string_height(text) / 2 - 16, text, complementary, complementary, complementary, complementary, 1);
        text = string(ds_list_size(docks));
        draw_text_colour(x - string_width(text) / 2, y - string_height(text) / 2, text, lighter, lighter, lighter, lighter, 1);
        text = string(acceptance);
        draw_text_colour(x - string_width(text) / 2, y - string_height(text) / 2 + 16, text, lighter, lighter, lighter, lighter, 1);
    }
    
    // in range
    if (in_range(o_ship, range))
    {
        // docked
        var portrait = false;
        if (o_ship.target == id)
        {            
            // dock stations
            if (is_type(o_space_station))
            {
                for(var i = 0; i &lt; ds_list_size(docks); i++)
                {
                    var inst = docks[| i];
                    if (instance_exists(inst))
                    {
                        var col = inst.image_blend;
                        var dir = point_direction(x, y, inst.x, inst.y);
                        var ix = x + lengthdir_x(range, dir);
                        var iy = y + lengthdir_y(range, dir);
                        draw_text_colour(ix, iy, "X", col, col, col, col, 0.75);
                    }
                }
            }
            
            portrait = true;
        }
        else
        {
            var col = ternary(banned, c_red, c_white);
            draw_line_colour(x, y, o_ship.x, o_ship.y, c_black, col);
        }
        
        // input
        if (global.typing)
        {
            var input = "&gt; " + o_ship.in;
            draw_textbox(x - string_width(input) / 2, y + hh + string_height(name) + string_height(input) + 4, input, o_ship.lighter, c_black, f_default, true, false);
        }
        
        // hacked
        if (!encoded)
        {
            // h4x
            var color = o_ship.image_blend;
            text = "[h4ck3d]";
            draw_text_colour(
                x - string_width(text) / 2, 
                y - sprite_width + string_height(text), 
                text, color, color, color, color, 0.50);
            portrait = true;
            
            // show inventory
            if (!is_undefined(inventory))
            {
                // ToDo: allow inventory to hold something other than colors!
                for (var i = 0; i &lt; ds_list_size(inventory); i++)
                {
                    var size = 16, item = inventory[| i], 
                        ix = x - sprite_width / 2 + 10;
                    draw_inventory(item, i, ix - size / 2 + 6, y - sprite_height / 2 - size * 2, size, 7, true, o_ship.selected == item);
                }
            }
        }
        
        if (portrait)
        {
            var can_trade = is_type(o_space_station);
        
            // entity portrait, output and offer
            var xw = sprite_get_width(icon),
                yh = sprite_get_height(icon);
            draw_portrait(icon, port_single, x - xw - xw / 2, y - yh - yh / 2, 128, lighter, encoded, encoded);
            if (can_trade &amp;&amp; !is_undefined(offer_item))
            {
                var col = offer_item[element.color],
                    xx = x - xw * 2 - 4,
                    yy = y - yh - yh / 2;
                draw_portrait(s_element, 0, xx, yy, 64, col, encoded, encoded);
                draw_text_colour(xx, yy, string(color_get_value(col)), lighter, lighter, lighter, lighter, 1);
                draw_text_colour(xx, yy + string_height(string(col)), string(offer_item[element.amount]), lighter, lighter, lighter, lighter, 1);
            }
            if (encoded)
                draw_chat(x - xw / 2 + 4, y - yh - yh / 2, out_words, lighter, 6);
            draw_textbox(x - xw / 2 + 10, y - yh - yh / 2, o_ship.out, lighter, darker, f_chat, true, true);
            
            // ship portrait, input and offer
            xw = o_ship.sprite_width;
            yh = o_ship.sprite_height;
            draw_portrait(o_ship.icon, o_ship.image_index, x + xw * 2, y + yh * 2, 64, o_ship.image_blend, true, true);
            if (!is_undefined(o_ship.offer_item))
                draw_portrait(s_element, 0, x + xw * 2, y + yh * 2 + 64 + 4, 64, o_ship.offer_item[element.color], encoded, encoded);
            if (encoded)
                draw_chat(x + 64 * 2 + 4, y + yh * 2, in_words, o_ship.lighter, 4);
        
            if (can_trade)
            {
                var s = ternary(is_undefined(sales[? o_ship.id]), 0, sales[? o_ship.id]),
                    status = string(o_ship.reputation) + " " + string(s);
                draw_text_colour(x + 64, y + yh * 2, status, o_ship.lighter, o_ship.lighter, o_ship.lighter, o_ship.lighter, 1);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
