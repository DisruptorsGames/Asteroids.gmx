<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
//flags = phy_debug_render_coms | phy_debug_render_shapes;
flags = phy_debug_render_coms 
    | phy_debug_render_aabb 
    | phy_debug_render_collision_pairs 
    | phy_debug_render_obb;

randomize();

global.sound = true;
global.debug = false;
global.typing = false;

// access to item array, i.e. item[element.color]
enum element { color = 1, amount, new }

// create default objects based on room
var cam = instance_create(0, 0, o_camera);
switch (room)
{
    case r_menu:
        instance_create(0, 0, o_menu_main);
        var center = irandom(100) &lt; 60,
            xx = ternary(center, vw / 2, random(room_width)),
            yy = ternary(center, vh / 2, random(room_height));
        var planet = instance_create(xx, yy, o_planet);
        planet.image_blend = ternary(center, c_white, make_colour_elm());
        repeat(irandom(10) + 3)
        {
            var asteroid = instance_spawn(random(room_width), random(room_height), o_asteroid_l, true);
            if (instance_exists(asteroid))
            {
                asteroid.image_blend = ternary(center, make_colour_elm(), 
                    make_colour_tint(o_planet.image_blend));
            }
        }
        break;
    case r_arcade:
        instance_create(0, 0, o_arcade);
        break;
    case r_space:
        sfx_play(sfx_music, 10, true);
    case r_planet:
        instance_spawn(random(room_width), random(room_height), o_ship, false);
        instance_create(0, 0, o_minefield);
        break;
    case r_colorz:
        instance_create(0, 0, o_pallete);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug Info
show_debug_overlay(global.debug);
if (global.debug)
{    
    // basic data + ship data
    var general = "#GENERAL"
        + "#Asteroids: " + string(instance_number(o_asteroid)) 
        + "#Blackholes: " + string(instance_number(o_blackhole))
        + "#Space Stations: " + string(instance_number(o_space_station))
        + "#Camera: " + string(vw) + "x" + string(vh)
        + "#View: " + string(view_wview[0]) + "x" + string(view_hview[0])
        + "#Port: " + string(view_wport[0]) + "x" + string(view_hport[0])
        + "#Border: " + string(view_hborder[0]) + "x" + string(view_vborder[0])
        + "#Z:" + string(o_camera.zoom) 
            + " F:" + string(o_camera.focus) 
            + " O:" + string(o_camera.overview);
    // ship data
    var sdata = "";
    if (instance_exists(o_ship))
    {
        var key = "?", screen = false;
        if (instance_exists(o_ship.target))
        {
            key = o_ship.target.key;
            screen = on_screen(o_ship.target.x, o_ship.target.y);
        }
            
        sdata = "##SHIP DATA"
            + "#Inventory: " + string(ds_list_size(o_ship.inventory))
            + "#Parts: " + string(ds_map_size(o_ship.parts))
            + "#Target: " + string(ternary(o_ship.target == noone, "?", o_ship.target))
            + "#Key: " + string(key)
            + "#Selected: " + string(ternary(is_undefined(o_ship.selected), "?", o_ship.selected))
            + "#Docked: " + string(o_ship.docked)
            + "#Physics: " + string(o_ship.phy_active)
            + "#Speed: " + string(o_ship.phy_speed);
    }
    draw_set_halign(fa_right);
    draw_text_colour(vw - 16, 4, general + sdata, c_white, c_white, c_white, c_white, 0.75);
    draw_set_halign(-1);
}

// sound indicator
var index = ternary(global.sound, 0, 1),
    h = sprite_get_height(s_icon_audio) / 2;
draw_portrait(s_icon_audio, index, vw / 2, vh - h, 16, c_white, false, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics
if (global.debug)
    physics_world_draw_debug(flags);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle Debug
global.debug = !global.debug;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go Back
room_goto(r_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
