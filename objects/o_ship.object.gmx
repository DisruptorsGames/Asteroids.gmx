<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_ship</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
silent = false;
efficiency = 0.25;
max_resources = 100;
resources = 100;
selected = undefined;
selected_inv = undefined;
docked = false;
range = vw * 2;
radar = 128;
target = noone;
int = "";
out = "";
icon = s_ship;
reputation = 0;
offer_item = undefined;
offer_amount = -1;

catalog = ds_list_create();
inventory = ds_list_create();
parts = ds_map_create();

image_single = ternary(room == r_space, irandom(image_number - 1), 0);
image_blend = ternary(room == r_space, make_colour_elm(), c_white);
make_colour_shades(image_blend);

phy_fixed_rotation = true;

// ToDo: don't reset key mapping if ship is destroyed
// controls
thrust = ord('W');
left = ord('A');
right = ord('D');
scan = ord('C');
use = ord('E');
drop = ord('Q');
fire = vk_space;
cycle = vk_tab;
modifier = vk_shift;
type = vk_enter;
alt = vk_alt;

mlook = false;

// parts
var value = ternary(room == r_space, 0, -1);
ds_map_add(parts, "engine", 0);
ds_map_add(parts, "laser", 0);
ds_map_add(parts, "radar", value);
ds_map_add(parts, "shield", value);
ds_map_add(parts, "catalog", value);
ds_map_add(parts, "cloaking", value);

// spawn protection
parts[? "shield"] = seconds(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup
ds_list_destroy(catalog);
ds_list_destroy(inventory);
ds_map_destroy(parts);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Respawn
if (instance_exists(o_arcade))
{
    if (!silent)
    {
        lives--;
        sfx_play(sfx_explode, 10, false);
        effect_create_above(ef_explosion, x, y, 0, c_white);
        
        // game over
        if (lives == 0)
        {
            var name = get_string("Name thy self, space cadet?", "Star Lord");
            highscore_add(name, score);
            score = 0;
            room_goto(r_highscores);
        }
    }
    o_arcade.timer = seconds(3);
}
else if (instance_exists(o_minefield))
{
    // create a mark location
    var mark = instance_create(x, y, o_marker);
    ds_list_copy(mark.catalog, catalog);
    ds_list_copy(mark.inventory, inventory);
    ds_list_copy(mark.parts, parts);
    mark.image_blend = image_blend;
    o_minefield.message = choose("REKT!", "GG!", "Youch!");
    o_minefield.timer = seconds(1);
}

// reset cursor
cursor_sprite = -1;
window_set_cursor(cr_arrow);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Final Actions

// ToDo: add dynamic ruberbanding based on distance to object
// slingshot
phy_linear_damping = ternary(docked, 0.75, 0);
phy_active = is_arcade() 
    || ((!docked || phy_speed &gt; 0) 
        &amp;&amp; parts[? "shield"] == 0 
        &amp;&amp; !o_camera.focus); 
image_alpha = ternary(phy_active, 1, 0);
parts[? "cloaking"] = image_alpha;

// recharge
if (docked &amp;&amp; instance_exists(target))
{
    // ToDo: do some kind of negative effect for recharging
    //       (possibly cost credits?)
    var amount = 0;
    switch (target.object_index)
    {
        case o_space_station:
            if (within(image_blend, target.image_blend) &lt;= 20)
                amount = efficiency / 2;
            break;
        case o_blackhole:
            amount = -efficiency / 10;
            break;
    }
    if (resources &gt; 0 &amp;&amp; resources &lt; max_resources + max_resources * efficiency)
        resources += amount;
}

// cooldown
var part = ds_map_find_first(parts);
for(var i = 0; i &lt; ds_map_size(parts); i++)
{
    // countdown on part value
    if (part != "catalog" &amp;&amp; part != "cloaking")
    {
        var val = parts[? part];
        if (val &gt; 0)
            parts[? part] -= 1;
    }
    part = ds_map_find_next(parts, part);
}

wrap();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls

// tab through items
if (keyboard_check_pressed(cycle))
{
    // set context inventory based on target
    valid_target = instance_exists(target) &amp;&amp; !target.encoded
        &amp;&amp; !is_undefined(target.inventory) &amp;&amp; ds_list_size(target.inventory) &gt; 0;
    
    if (docked &amp;&amp; valid_target)
        selected_inv = target.inventory;
    else
        selected_inv = inventory;
        
    // cycle through, either selecting first/last or adding/subtracting one
    var size = ds_list_size(selected_inv);
    if (is_undefined(selected))
        index = ternary(keyboard_check(modifier), size - 1, 0);
    else
        index = ds_list_next(index, size);
        
    // selected new value, clear new indicator
    selected = selected_inv[| index];
    selected[element.new] = false;
    ds_list_replace(selected_inv, index, selected);
}
// show selected item
if (keyboard_check_pressed(alt) &amp;&amp; global.typing)
{
    if (!is_undefined(selected) &amp;&amp; string_count(string(selected), keyboard_string) == 0)
        keyboard_string += string(selected[element.color]);
}

// actions that fire when not typing and not docked
if (!global.typing &amp;&amp; !docked)
{
    // use item
    if (keyboard_check_pressed(use))
    {
        if (!is_undefined(selected))
        {
            var color = selected[element.color];
            if (within(image_blend, color) &lt;= 20)
            {
                if (resources &lt; max_resources)
                {
                    resources += 10;
                    o_ship.selected = element_dec(inventory, color, 10);
                }
            }
        }
    }
    // drop item
    if (keyboard_check_pressed(drop))
    {
        if (!is_undefined(selected))
        {
            var color = selected[element.color];
            o_ship.selected = element_dec(inventory, color, selected[element.amount]);
            var xx = lengthdir_x(40, -phy_rotation),
                yy = lengthdir_y(40, -phy_rotation),
                item = instance_create(phy_position_x + xx, phy_position_y + yy, o_element);
            item.image_blend = color;
            item.phy_rotation = phy_rotation;
            with (item)
            {
                physics_apply_local_impulse(0, -16, 0, 16);
            }
        }
    }

    // actions that cost resources
    if (resources &gt; 0)
    {    
        // turn
        if (mlook)
            phy_rotation = -(point_direction(phy_position_x, phy_position_y, mouse_x, mouse_y) - 90);
        else if (keyboard_check(left))
            phy_rotation -= 3;
        else if (keyboard_check(right))
            phy_rotation += 3;
    
        // thrust
        if (keyboard_check(thrust) &amp;&amp; parts[? "engine"] == 0)
        {
            physics_apply_local_force(0, 0, 0, -20);
            resources -= consume(efficiency);
            instance_create(x, y, o_thrust);
            parts[? "engine"] = 1;//1 / efficiency;
        }
              
        // fire
        if (keyboard_check(fire) &amp;&amp; parts[? "laser"] == 0)
        {
            sfx_play(sfx_laser, 10, false);
            with (instance_create(x, y, o_ship_l))
            {
                image_blend = other.image_blend;
                phy_rotation = other.phy_rotation;
                physics_apply_local_impulse(0, sprite_height, 0, -(other.phy_speed * 10 + 10));
            }
            
            resources -= consume(efficiency);
            parts[? "laser"] = 5 / efficiency;
        }
        
        // scan
        if (keyboard_check_pressed(scan) &amp;&amp; parts[? "radar"] == 0)
        {
            // scan all instances
            for (var i = 0; i &lt; instance_count; i++)
            {
                var inst = instance_id[i];
                if(instance_exists(inst))
                {
                    inst.dist = distance_to_object(inst);
                    var indicator = entity_get_indicator(inst.object_index);
                    if (inst.dist &lt; range &amp;&amp; !is_undefined(indicator))
                    {
                        if (ds_list_find_index(catalog, inst.id) == -1)
                        {
                            ds_list_add(catalog, inst.id);
                            parts[? "catalog"]++;
                        }
                    }
                }
            }
            
            instance_create(x, y, o_scan);
            resources -= consume(efficiency);
            parts[? "radar"] = 60 / efficiency;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_saucer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy
score += 100;
with(other) { instance_destroy(); }
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>o_ship</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HUD
if (room == r_space)
{
    // health
    var col = ternary(resources &lt; 50, c_white, c_black);
    var size = max_resources * 3;
    var text = string(resources);
    draw_healthbar(16, 16, size, 32, (resources / max_resources) * 100, c_black, c_black, image_blend, 0, true, true);
    draw_text_colour(16 + (size - string_width(text)) / 2, 16 + (16 - string_height(text)) / 2, text, col, col, col, col, 0.80);
    // current resource color
    var current = string(colour_get_value(image_blend));
    draw_text_colour(size + 16, string_height(current) + 4, current, image_blend, image_blend, image_blend, image_blend, 1);
    // selected inventory item
    if (!is_undefined(selected))
    {
        var sel = "[" + 
            string(color_get_value(selected[element.color])) + ":" + 
            string(selected[element.amount]) + ":" +
            string(selected[element.new]) +
            "]";
        draw_text_colour(size + string_width(current) + 16 + 4, string_height(sel) + 3, sel, selected[element.color], selected[element.color], selected[element.color], selected[element.color], 1);
    }
    
    // show fps
    var FPS = string(round(fps));
    draw_set_font(f_title);
    draw_text_colour((vw - string_width(FPS)) / 2, 4, FPS, image_blend, image_blend, image_blend, image_blend, 0.75);
    draw_set_font(-1);
    
    // ToDo: add catalog / compass to inventory ???
    // inventory
    for(var i = 0; i &lt; ds_list_size(inventory); i++)
    {
        var size = 32, item = inventory[| i];
        draw_inventory(item, i, size / 2 + 6, size / 2 + 32, size, 7, false, selected == item);
    }
    
    // speed
    if (round(phy_speed) &gt; 0)
    {
        draw_set_font(f_title);
        var text = string(round(phy_speed));
        var yy = vh - string_height(text) - 4;
        draw_text_colour((vw - string_width(text)) / 2, yy - 128, text, image_blend, image_blend, image_blend, image_blend, phy_speed / 20);
        draw_set_font(-1);
    }
    
    // parts
    var part = ds_map_find_first(parts);
    for(var i = 0; i &lt; ds_map_size(parts); i++)
    {
        // part details
        var divide = parts[? part] &gt; 30 
            &amp;&amp; !(part == "catalog" || part == "cloaking");
        var val = round(ternary(divide, parts[? part] / room_speed, parts[? part]));
        var text = string(val);
        var sprite = icon_get_sprite(part);
        // calculations
        var cx = (vw - ds_map_size(parts) * sprite_get_width(sprite)) / 2;
        var ix = cx + i * sprite_get_width(sprite);
        var iy = vh - sprite_get_height(sprite) * 2;
        // drawing
        draw_portrait(sprite, -1, ix, iy, 64, image_blend, true, true);
        if (val &gt; 0)
        {
            draw_set_font(f_title);
            draw_text_colour(ix + (sprite_get_width(sprite) - string_width(text)) / 2, iy + (sprite_get_height(sprite) - string_height(text)) / 2, text, lighter, lighter, lighter, lighter, 1);
            draw_set_font(-1);
        }
        part = ds_map_find_next(parts, part);
    }

    // reference lines
    if (global.debug)
    {
        draw_circle_colour(vw / 2, vh / 2, radar, c_red, c_red, true);
        draw_line_colour(vw / 2, 0, vw / 2, vh, c_red, c_red);
        draw_line_colour(0, vh / 2, vw, vh / 2, c_red, c_red);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Self
draw_self();

// dont do fancy stuff if arcade mode
if (is_arcade())
    return 0;

// orbit around target
if (instance_exists(target))
{
    var dir = point_direction(target.x, target.y, x, y);
    var xx = target.x + lengthdir_x(target.range, dir);
    var yy = target.y + lengthdir_y(target.range, dir);
    //phy_rotation = -dir;
    phy_position_x = xx;
    phy_position_y = yy;
}

// offgas (efficiency:2.5%)
if (round(phy_speed) &gt; 0 &amp;&amp; random(1) &lt; efficiency * .10)
    effect_create_below(ef_spark, x, y, 0, merge_colour(image_blend, c_black, efficiency));

if(!docked)
{    
    // compass rose
    var dir = 0;
    for (var i = 0; i &lt; 4; i++)
    {
        var char;
        switch (dir)
        {
            case   0: char = "E" break;
            case  90: char = "N" break;
            case 180: char = "W" break;
            case 270: char = "S" break;
        }
        var xx = x + lengthdir_x(radar, dir);
        var yy = y + lengthdir_y(radar, dir);
        draw_text_colour(xx, yy, char, darker, darker, darker, darker, 0.5);
        dir += 90;
    }
    
    // radar
    for (var i = 0; i &lt; ds_list_size(catalog); i++)
    {
        var item = catalog[| i],
            indicator = entity_get_indicator(item.object_index),
            color = item.image_blend,
            alpha = ternary(on_screen(item.x, item.y), 0, 1 - distance_to_object(item) / range),
            dir = point_direction(x, y, item.x, item.y),
            xx = lengthdir_x(radar, dir),
            yy = lengthdir_y(radar, dir);
        draw_text_colour(x + xx, y + yy, indicator, color, color, color, color, alpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="121">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle Mouse Look
mlook = !mlook;
cursor_sprite = ternary(mlook, s_crosshair, -1);
window_set_cursor(ternary(mlook, cr_none, cr_arrow));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="119">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// (CHEAT) Add Item
if (target != noone &amp;&amp; !is_undefined(target.inventory))
    element_add(target.inventory, image_blend, 10, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="118">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// (CHEAT) Add Item
element_add(inventory, image_blend, 10, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.150000005960464</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.5</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,32</point>
    <point>16,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
