<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
base_w = 1024;
base_h = 768;
width = base_w;
height = base_h;
rate = 0.1;
zoom = 1;
overview = false;
focus = false;

if (!view_enabled)
{
    view_object[0] = ternary(room == r_menu, o_planet, o_ship);
    view_hborder[0] = view_wview[0] / 2;
    view_vborder[0] = view_hview[0] / 2;
    view_visible[0] = true;
    view_enabled = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Rescale
var max_w = display_get_width(), max_h = display_get_height(),
    aspect = ternary(window_get_fullscreen(), max_w / max_h, base_w / base_h);
// camera
width = ternary(aspect &gt; 1, min(base_w, max_w), base_h * aspect);
height = ternary(aspect &gt; 1, base_w / aspect, min(base_h, max_h));
// gui
display_set_gui_size(width, height);
// surface
surface_resize(application_surface, width, height);
// view
view_wview[0] = floor(ternary(overview, room_width, width) * zoom);
view_hview[0] = floor(ternary(overview, room_height, height) * zoom);
view_wport[0] = max_w;
view_hport[0] = max_h;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Zoom
if (mouse_wheel_down())
    zoom += rate;
else if (mouse_wheel_up())
    zoom -= rate;
else
{
    // zoom in to object
    /*focus = view_wview[0] &gt; base_w &amp;&amp; view_hview[0] &gt; base_h 
        &amp;&amp; view_wview[0] &lt; room_width &amp;&amp; view_hview[0] &lt; room_height;*/
    zoom = ternary(focus, lerp(zoom, 0, rate / room_speed), zoom);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug
if (global.debug)
{
    // view
    draw_set_alpha(0.25);
    draw_rectangle_colour(vx, vy, vx + view_wview[0], vy + view_hview[0], c_gray, c_gray, c_gray, c_gray, false);
    draw_set_alpha(1);
    // camera
    draw_rectangle_colour(vx, vy, vx + vw, vy + vh, c_red, c_red, c_red, c_red, true);
    // port
    var xx = view_xport[0], yy = view_yport[0], w = view_wport[0], h = view_hport[0];
    draw_rectangle_colour(xx, yy, xx + w, yy + h, c_green, c_green, c_green, c_green, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle Overview
overview = !overview;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
